# ERROR HANDLING ----------
let stop <- fn(msg: char): Empty {
	...
};


# OPTION TYPE -------------
type Option<T> = .Some(T) | .None;

let unwrap <- fn(value: Option<T>): T {
	match value {
		Some(v)	=> v,
		None => stop("The value is not unwrappable.") 
	}
};

let expect <- fn(value: Option<T>, msg: char): T {
	match value {
		Some(v)	=> v,
		None => stop(msg) 
	}
};


let unwrap_or <- fn(value: Option<T>, alternative: T): T {
	match value {
		Some(v) => v,
		None => alternative
	}
};

let is_some <- fn(value: Option<T>): bool {
	match value {
		Some(v) => true,
		None => false
	}
};

let is_none <- fn(value: Option<T>): bool {
	match value {
		Some(v) => false,
		None => true
	}
};


let nchar <- fn(a: char): int {
	...
};

let len <- fn(a: char): int {
	nchar(a)
};

let sys__info <- fn(): char {
	...
};

let sys__getenv <- fn(): [#N, char] {
	...
};

let sys__setenv <- fn(var: char, val: char): [#N, char] {
	...
};

let sys__time <- fn(): char {
	...
};

let sys__date <- fn(): char {
	...
};

let sys__sleep <- fn(n: int): .None {
	...
};

let sys__which <- fn(n: char): char {
	...
};

let sys__timezone <- fn(): char {
	...
};

let sys__setlocale <- fn(): .None {
	...
};

let as__character <- fn(a: A): char {
	...
};

let as__numeric <- fn(a: A): num {
	...
};

let as__integer <- fn(a: A): int {
	...
};

let as__logical <- fn(a: A): int {
	...
};

let map <- fn(a: [#N, T], f: (T) -> U): [#N, U] {
	...
};


let rev <- fn(a: [#N, T]): [#N, T] {
	...
};

let mean <- fn(a: [#N, T]): T  {
	...
};

let sd <- fn(a: [#N, T]): T  {
	...
};

let min <- fn(a: [#N, T]): T  {
	...
};

let max <- fn(a: [#N, T]): T  {
	...
};

let add <- fn(a: int, b: int): int {
	...
};

let add <- fn(a: num, b: num): num {
	...
};

let minus <- fn(a: int, b: int): int {
	...
};

let minus <- fn(a: num, b: num): num {
	...
};

let mul <- fn(a: int, b: int): int {
	...
};

let mul <- fn(a: num, b: num): num {
	...
};

let div <- fn(a: int, b: int): int {
	...
};

let div <- fn(a: num, b: num): num {
	...
};

let plot <- fn(a: [#N, num], b: [#N, num], type: char): .None {
	...
};

let get <- fn(a: {}, b: char): T {
	...
};

let print <- fn(a: char): .None {
	...
};

let seq <- fn(a: #I, b: #J, c: #K): [#J-#I/#K, int] {
	...
};

let substr <- fn(a: char, b: int, e: int): char {
	...
};

let sub <- fn(a: char, b: char, c: char): char {
	...
};

let replace <- fn(s: char, old: char, new: char): char {
	sub(old, new, s)
};

let gsub <- fn(a: char, b: char, c: char): char {
	...
};

let replace_all <- fn(s: char, old: char, new: char): char {
	gsub(old, new, s)
};

let strsplit <- fn(s: char, d: char): [#N, char] {
	...
};

let split <- fn(s: char, d: char): [#N, char] {
	strsplit(s, d)
};

let join <- fn(a: [#N, char], s: char): char {
	...
};

let tolower <- fn(a: char): char {
	...
};

let toupper <- fn(a: char): char {
	...
};

let startsWith <- fn(a: char, b: char): bool {
	...
};

let endsWith <- fn(a: char, b: char): bool {
	...
};

let grepl <- fn(a: char, b: char): bool {
	...
};

let contains <- fn(a: char, b: char): bool {
	...
};


let dot <- fn(m: [#M, [#P, int]], n: [#P, [#N, int]]): [#M, [#N, int]] {
	...
};

let t <- fn(m: [#M, [#N, T]]): [#N, [#M, T]] {
	...
};
