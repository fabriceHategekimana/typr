# PLOT FUNCTION ----------
let plot <- fn(a: [#N, num], b: [#N, num], c: char, xlim: [2, num], ylim: [2, num], log: char, main: char, sub: char, xlab: char, ylab: char, ann: bool, axes: bool): .None {
	...
};

type Plot = { x: [#N, num], y: [#N, num], type: char, xlim: [2, num], ylim: [2, num], log: char, main: char, sub: char, xlab: char, ylab: char, ann: bool, axes: bool};


let bplot <- fn(): Plot {
	:{ x: [0.5], y: [0.5], type: "p", xlim: [0.0, 5.0], ylim: [0.0, 5.0], log: "", main: "", sub: "", xlab: "", ylab: "", ann: true, axes: true}
};

let show <- fn(p: Plot): .None {
	plot(p.x, p.y, p.type, p.xlim, p.ylim, p.log, p.main, p.sub, p.xlab, p.ylab, p.ann, p.axes)
};

type BPlot = { x: [1, num], y: [1, num], type: char, xlim: [2, num], ylim: [2, num], log: char, main: char, sub: char, xlab: char, ylab: char, ann: bool, axes: bool};
#---------------------

# System execution ----------

let system2 <- fn(command: char, args: [#N, char], stdout: char, stderr: char, stdin: char): char {
	...
};

type System2 = { command: char, args: [#N, char], stdout: char, stderr: char, stdin: char};


let bsystem2 <- fn(command: char): System2 {
	:{ command: command, args: [""], stdout: "", stderr: "", stdin: ""}
};

type BSystem2 = { command: char, args: [1, char], stdout: char, stderr: char, stdin: char};

let exec <- fn(s: System2): char {
	system2(s.command, s.args, s.stdout, s.stderr, s.stdin)
};
# --------------------------------

let dot <- fn(m: [#M, [#P, int]], n: [#P, [#N, int]]): [#M, [#N, int]] {
	...
};

let t <- fn(m: [#M, [#N, T]]): [#N, [#M, T]] {
	...
};

# File System management ----------

let getwd <- fn(): char {
	...
};

let setwd <- fn(path: char): char {
	...
};

let dir <- fn(): [#N, char] {
	...
};

let list__files <- fn(): [#N, char] {
	...	
};

let file__exists <- fn(file: char): bool {
	...
};

let file__create <- fn(file: char): bool {
	...
};

let file__remove <- fn(file: char): bool {
	...
};

let file__rename <- fn(old: char, new: char): bool {
	...
};

let file__copy <- fn(source: char, dest: char): bool {
	...
};

let dir__create <- fn(source: char, dest: char): bool {
	...
};

let unlink <- fn(target: char): bool {
	...
};


# --------------------------------

let nchar <- fn(a: char): int {
	...
};

let len <- fn(a: char): int {
	nchar(a)
};

let sys__info <- fn(): char {
	...
};

let sys__getenv <- fn(): [#N, char] {
	...
};

let sys__setenv <- fn(var: char, val: char): [#N, char] {
	...
};

let sys__time <- fn(): char {
	...
};

let sys__date <- fn(): char {
	...
};

let sys__sleep <- fn(n: int): .None {
	...
};

let sys__which <- fn(n: char): char {
	...
};

let sys__timezone <- fn(): char {
	...
};

let sys__setlocale <- fn(): .None {
	...
};

let as__character <- fn(a: A): char {
	...
};

let as__numeric <- fn(a: A): num {
	...
};

let as__integer <- fn(a: A): int {
	...
};

let as__logical <- fn(a: A): int {
	...
};

let map <- fn(a: [#N, T], f: (T) -> U): [#N, U] {
	...
};


let rev <- fn(a: [#N, T]): [#N, T] {
	...
};

let mean <- fn(a: [#N, T]): T  {
	...
};

let sd <- fn(a: [#N, T]): T  {
	...
};

let min <- fn(a: [#N, T]): T  {
	...
};

let max <- fn(a: [#N, T]): T  {
	...
};

let add <- fn(a: int, b: int): int {
	...
};

let add <- fn(a: num, b: num): num {
	...
};

let minus <- fn(a: int, b: int): int {
	...
};

let minus <- fn(a: num, b: num): num {
	...
};

let mul <- fn(a: int, b: int): int {
	...
};

let mul <- fn(a: num, b: num): num {
	...
};

let div <- fn(a: int, b: int): int {
	...
};

let div <- fn(a: num, b: num): num {
	...
};

let plot <- fn(a: [#N, num], b: [#N, num], type: char): .None {
	...
};

let get <- fn(a: {}, b: char): T {
	...
};

let print <- fn(a: char): .None {
	...
};

let seq <- fn(a: #I, b: #J, c: #K): [#J-#I/#K, int] {
	...
};

let substr <- fn(a: char, b: int, e: int): char {
	...
};

let sub <- fn(a: char, b: char, c: char): char {
	...
};

let replace <- fn(s: char, old: char, new: char): char {
	sub(old, new, s)
};

let gsub <- fn(a: char, b: char, c: char): char {
	...
};

let replace_all <- fn(s: char, old: char, new: char): char {
	gsub(old, new, s)
};

let strsplit <- fn(s: char, d: char): [#N, char] {
	...
};

let split <- fn(s: char, d: char): [#N, char] {
	strsplit(s, d)
};

let join <- fn(a: [#N, char], s: char): char {
	...
};

let tolower <- fn(a: char): char {
	...
};

let toupper <- fn(a: char): char {
	...
};

let startsWith <- fn(a: char, b: char): bool {
	...
};

let endsWith <- fn(a: char, b: char): bool {
	...
};

let grepl <- fn(a: char, b: char): bool {
	...
};

let contains <- fn(a: char, b: char): bool {
	...
};

